apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
  namespace: monitoring 
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      nodeName: 10.0.0.10
     #securityContext:
        #fsGroup: 472
        #supplementalGroups:
        #  - 0
      initContainers:
      - name: fix-permissions
        image: alpine:3.12.10
        imagePullPolicy: IfNotPresent
        command: ["sh","-c","chown -R 472:472 /var/lib/grafana/"]
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /var/lib/grafana
          name: grafana-storage
      containers:
      - name: grafana
        image: ljn1029/hw:grafana-7-5-10
        imagePullPolicy: IfNotPresent
        env:
        - name: GRAFANA_SERVER_DOMAIN
          value: 'www.asbefore.top'
        - name: GRAFANA_SERVER_ENFORCE_DOMAIN
          value: 'true'
        - name: GRAFANA_SERVER_ROOT_RUL_PREFIX
          value: 'hw_grafana'
        ports:
        - containerPort: 3000
          name: http-grafana
          protocol: TCP
        resources:
          limits:
            cpu: 200m
            memory: 200Mi
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /robots.txt
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 2
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 3000
          timeoutSeconds: 1
        volumeMounts:
        - mountPath: /var/lib/grafana
          name: grafana-storage
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc-nfs
